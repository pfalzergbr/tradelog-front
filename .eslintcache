[{"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\index.js":"1","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\App.js":"2","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Context\\MainContext.js":"3","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Routers\\AppRouter.js":"4","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Hooks\\useAuthentication.js":"5","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Reducers\\tradeReducer.js":"6","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Dashboard.js":"7","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Performance.js":"8","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Trades.js":"9","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\TradeDetails.js":"10","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Landing.js":"11","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Login.js":"12","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Register.js":"13","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\AccountDetails.js":"14","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Accounts.js":"15","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Profile.js":"16","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\NotFound.js":"17","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Strategies.js":"18","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Nav.js":"19","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Hooks\\usePagination.js":"20","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Loading.js":"21","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Hooks\\useAxios.js":"22","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\NewTrade.js":"23","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Footer.js":"24","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\UI\\ErrorMessage.js":"25","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\UI\\Pagination.js":"26","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Modals\\EditAccount.js":"27","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Modals\\DeleteModal.js":"28","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Modals\\NewAccount.js":"29","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\UI\\PaginatedData.js":"30","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\TradeItem.js":"31"},{"size":289,"mtime":1605800201458,"results":"32","hashOfConfig":"33"},{"size":434,"mtime":1605114264907,"results":"34","hashOfConfig":"33"},{"size":979,"mtime":1605603203086,"results":"35","hashOfConfig":"33"},{"size":3255,"mtime":1606050697658,"results":"36","hashOfConfig":"33"},{"size":2451,"mtime":1605695582189,"results":"37","hashOfConfig":"33"},{"size":355,"mtime":1605102741368,"results":"38","hashOfConfig":"33"},{"size":755,"mtime":1606065099559,"results":"39","hashOfConfig":"33"},{"size":304,"mtime":1604931881729,"results":"40","hashOfConfig":"33"},{"size":2228,"mtime":1605698235905,"results":"41","hashOfConfig":"33"},{"size":3546,"mtime":1605784552923,"results":"42","hashOfConfig":"33"},{"size":397,"mtime":1606057550796,"results":"43","hashOfConfig":"33"},{"size":3198,"mtime":1606125063409,"results":"44","hashOfConfig":"33"},{"size":5205,"mtime":1606125217058,"results":"45","hashOfConfig":"33"},{"size":4305,"mtime":1607329232057,"results":"46","hashOfConfig":"33"},{"size":2287,"mtime":1605695294120,"results":"47","hashOfConfig":"33"},{"size":5558,"mtime":1607328385831,"results":"48","hashOfConfig":"33"},{"size":118,"mtime":1604946717477,"results":"49","hashOfConfig":"33"},{"size":134,"mtime":1604934800197,"results":"50","hashOfConfig":"33"},{"size":1507,"mtime":1606123069985,"results":"51","hashOfConfig":"33"},{"size":1129,"mtime":1605521627365,"results":"52","hashOfConfig":"33"},{"size":177,"mtime":1605369393715,"results":"53","hashOfConfig":"33"},{"size":1118,"mtime":1605371672553,"results":"54","hashOfConfig":"33"},{"size":5241,"mtime":1605799269746,"results":"55","hashOfConfig":"33"},{"size":710,"mtime":1606039159500,"results":"56","hashOfConfig":"33"},{"size":213,"mtime":1605120318579,"results":"57","hashOfConfig":"33"},{"size":914,"mtime":1605552445405,"results":"58","hashOfConfig":"33"},{"size":3068,"mtime":1605796317949,"results":"59","hashOfConfig":"33"},{"size":1121,"mtime":1605775139930,"results":"60","hashOfConfig":"33"},{"size":3488,"mtime":1606829245394,"results":"61","hashOfConfig":"33"},{"size":557,"mtime":1605600965620,"results":"62","hashOfConfig":"33"},{"size":281,"mtime":1604939928920,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"13m6jtx",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"66"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"66"},"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\index.js",[],["139","140"],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\App.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Context\\MainContext.js",["141"],"import React, { createContext, useReducer, useCallback } from 'react';\r\nimport { useAuthentication } from '../Hooks/useAuthentication';\r\nimport { tradeReducer } from '../Reducers/tradeReducer';\r\n\r\nexport const CurrentTradesContext = createContext();\r\nexport const AuthContext = createContext();\r\n\r\nexport const MainContextProvider = (props) => {\r\n    const [currentTrades, dispatchCurrentTrades] = useReducer(tradeReducer, []);\r\n    const { token, user, login, logout, addAccount, removeAccount } = useAuthentication();\r\n\r\n    const dispatch = useCallback((action) => {\r\n        dispatchCurrentTrades(action);\r\n    });\r\n\r\n    return (\r\n        <CurrentTradesContext.Provider value={{ currentTrades, dispatch }}>\r\n            <AuthContext.Provider value={{ token, user, login, logout, addAccount, removeAccount }}>\r\n                {props.children}\r\n            </AuthContext.Provider>\r\n        </CurrentTradesContext.Provider>\r\n    );\r\n};\r\n\r\nexport default MainContextProvider;\r\n","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Routers\\AppRouter.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Hooks\\useAuthentication.js",["142","143"],"import { useState, useCallback, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const useAuthentication = () => {\r\n    const [token, setToken] = useState(false);\r\n    const [user, setUser] = useState(null);\r\n    const history = useHistory();\r\n\r\n    //TODO - move to cookies for more security\r\n    //TODO - implement timeout function, and set expiry in the backend.\r\n\r\n    // Handles login. Sets a token, and basic user data with name and Id, then sends it to local storage. .\r\n    const login = useCallback((user, token,) => {\r\n        setToken(token);\r\n        setUser(user);\r\n        localStorage.setItem('userData', JSON.stringify({ user, token }));\r\n    }, []);\r\n\r\n    // Handle logout. Clears tokens, user data and local storage, and redirects to the homepage.\r\n    const logout = useCallback(() => {\r\n        setToken(null);\r\n        setUser(null);\r\n        localStorage.removeItem('userData');\r\n        history.push('/');\r\n    }, []);\r\n    //Checking local storage on login for Token data, logs in if finds one.\r\n\r\n    //Handles adding new accounts to a user, so the frontend can load basic account info without an API request.\r\n    const addAccount = useCallback((newAccount) => {\r\n        const accountData = {\r\n            _id: newAccount._id,\r\n            accountName: newAccount.accountName\r\n        }\r\n\r\n        const newUser = {\r\n            userName: user.userName,\r\n            userId: user.userId,\r\n            accounts: [...user.accounts, accountData]\r\n        }\r\n\r\n\r\n        setUser(newUser)\r\n    }, [user])\r\n    \r\n    //Removes an account from context, to match server side. \r\n    const removeAccount = useCallback((accountId) => {\r\n        const newUser = {\r\n            ...user\r\n        }\r\n        newUser.accounts = newUser.accounts.filter(account => accountId !== account._id);\r\n        setUser(newUser)\r\n    }, [user])\r\n\r\n    //Saving changes of user to local storage on change, to keep track of accounts between refreshes.\r\n    useEffect(() => {\r\n        if ( user ){\r\n            localStorage.setItem('userData', JSON.stringify({ user, token }));\r\n        }\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        const userData = JSON.parse(localStorage.getItem('userData'));\r\n        if (userData && userData.user && userData.token) {\r\n            login(userData.user, userData.token);\r\n        }\r\n    }, [login]);\r\n\r\n    return { token, user, login, logout, addAccount, removeAccount};\r\n};\r\n","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Reducers\\tradeReducer.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Dashboard.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Performance.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Trades.js",["144"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport { useHistory, Link } from 'react-router-dom';\r\n\r\nimport { usePagination } from '../Hooks/usePagination';\r\nimport Pagination from '../Components/UI/Pagination';\r\n\r\nimport Loading from '../Components/Loading';\r\nimport { AuthContext } from '../Context/MainContext';\r\nimport { useAxios } from '../Hooks/useAxios';\r\n\r\nconst Trades = (props) => {\r\n    const { user, token } = useContext(AuthContext);\r\n    const [ account, setAccount ] = useState( user.accounts[0]._id || null);\r\n    const { isLoading, sendRequest } = useAxios();\r\n    const { paginate, paginatedData, pageNumbers } = usePagination();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const fetchTrades = async () => {\r\n            try {\r\n                const response = await sendRequest(\r\n                    `http://localhost:3000/api/trades/account/${account}`,\r\n                    'GET',\r\n                    {},\r\n                    { Authorization: `Bearer ${token}` },\r\n                );\r\n\r\n                paginate(response.data, 5);\r\n                history.push(`/${user.userId}/trades/page-1`);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        fetchTrades();\r\n    }, [account]);\r\n\r\n    const changeAccount = (event) => {\r\n        setAccount(event.target.value);\r\n    } \r\n\r\n    return (\r\n        <React.Fragment>\r\n            { account ? <select value={account} onChange={changeAccount}>\r\n                {user.accounts.map(account => <option key={account._id} value={account._id}>{account.accountName}</option>)}\r\n            </select>\r\n            : <div><p>You haven`t got any accounts yet</p><Link to={`/${user.userId}/accounts`}>Create one here</Link></div>}\r\n            {isLoading && <Loading />}\r\n            {!isLoading && (\r\n                <div>\r\n                    <Pagination\r\n                        data={paginatedData}\r\n                        pageNumbers={pageNumbers}\r\n                        userId={user.userId}\r\n                        itemType={'trade'}\r\n                    />\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Trades;\r\n","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\TradeDetails.js",["145","146"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Modal from 'react-modal';\r\n\r\nimport Loading from '../Components/Loading';\r\nimport DeleteModal from '../Components/Modals/DeleteModal';\r\nimport { AuthContext } from '../Context/MainContext';\r\nimport { useAxios } from '../Hooks/useAxios';\r\n\r\nconst TradeDetails = (props) => {\r\n    const { token, user } = useContext(AuthContext);\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n    const { isLoading, sendRequest } = useAxios();\r\n    const [ trade, setTrade] = useState({});\r\n    const { tradeId } = useParams();\r\n    const { symbol, outcome, amount } = trade;\r\n    const history = useHistory();\r\n\r\n    //Modal Data passed in the Delete Modal.\r\n    const modalData = {\r\n        header: `Warning`,\r\n        message: ' Please only delete the trade if you had an input mistake. Deleting trades from your record changes your statistics, and distorts your real performance.',\r\n        note: 'Note: You cannot reverse this action once you deleted the trade',\r\n        label: 'Yes, I want to delete this trade',\r\n        button: 'Delete'\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchTrade = async () => {\r\n            try {\r\n                const response = await sendRequest(\r\n                    `http://localhost:3000/api/trades/${tradeId}`,\r\n                    'GET',\r\n                    {},\r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                );\r\n                setTrade(response.data);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n\r\n        fetchTrade();\r\n    }, []);\r\n\r\n    //Sends a delete trade request to the API. Passed down and called in the Modal.\r\n    const handleDelete = async () => {\r\n        try {\r\n            const response = await sendRequest(\r\n                `http://localhost:3000/api/trades/${tradeId}`,\r\n                'DELETE',\r\n                {},\r\n\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            );\r\n            history.replace(`/${user.userId}/trades/`);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    //Modal Open-Close Handlers\r\n    const openModal = () => {\r\n        setModalIsOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setModalIsOpen(false);\r\n    };\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            { isLoading && <Loading />}\r\n            { !isLoading && <div>\r\n                <Modal isOpen={modalIsOpen} onRequestClose={closeModal}>\r\n                    <DeleteModal\r\n                        closeModal={closeModal}\r\n                        onDelete={handleDelete}\r\n                        modalData={modalData}\r\n                    />\r\n                </Modal>\r\n                <h1>TradeDetails</h1>\r\n                <h2>{symbol}</h2>\r\n                <p>{outcome}</p>\r\n                <span>{amount}</span>\r\n                <button>Edit Details</button>\r\n                <button\r\n                    onClick={() => {\r\n                        history.go(-1);\r\n                    }}>\r\n                    Back\r\n                </button>\r\n                <button onClick={openModal}>Delete</button>\r\n            </div>}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default TradeDetails;\r\n","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Landing.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Login.js",["147","148"],"import React, { useContext } from 'react';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Footer from '../Components/Footer';\r\nimport Loading from '../Components/Loading';\r\nimport { AuthContext } from '../Context/MainContext';\r\nimport { useAxios } from '../Hooks/useAxios';\r\n\r\nconst loginSchema = yup.object().shape({\r\n    email: yup.string().email().required(),\r\n    password: yup.string().required(),\r\n});\r\n\r\nconst Login = (props) => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, sendRequest } = useAxios();\r\n    const { register, handleSubmit, watch, errors, formState } = useForm({\r\n        resolver: yupResolver(loginSchema),\r\n        mode: 'onChange',\r\n    });\r\n    const { isValid } = formState;\r\n    const history = useHistory();\r\n\r\n    // Submits a Post request for /api/user/login\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            const response = await sendRequest(\r\n                'http://localhost:3000/api/user/login',\r\n                'POST',\r\n                JSON.stringify(data),\r\n                { 'Content-Type': 'application/json' },\r\n            );\r\n            auth.login(response.data.user, response.data.token);\r\n            history.push(`/${response.data.user.userId}/dashboard`);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='login-page'>\r\n            {isLoading && <Loading />}\r\n            {!isLoading && (\r\n                <div className='form-container'>\r\n                    <form\r\n                        className='form form--login'\r\n                        onSubmit={handleSubmit(onSubmit)}>\r\n                        <h2 className=\"form__title\">Login</h2>\r\n                        <label className='form__label' htmlFor='email'>\r\n                            E-mail\r\n                        </label>\r\n                        <input\r\n                            className='form__input'\r\n                            name='email'\r\n                            placeholder=\"E-mail\"\r\n                            ref={register}\r\n                        />\r\n                        <label className='form__label' htmlFor='password'>\r\n                            Password\r\n                        </label>\r\n                        <input\r\n                            className='form__input'\r\n                            type='password'\r\n                            name='password'\r\n                            placeholder=\"Password\"\r\n                            ref={register}\r\n                        />\r\n                        <button\r\n                            className='btn form__btn btn--primary'\r\n                            disabled={!isValid}\r\n                            type='submit'>\r\n                            Log in\r\n                        </button>\r\n                        <Link className=\"form__link\" to='/user/register'>Register here</Link>\r\n                    </form>\r\n                </div>\r\n            )}\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Register.js",["149"],"import React, { useContext } from 'react';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Loading from '../Components/Loading';\r\nimport { AuthContext } from '../Context/MainContext';\r\nimport { useAxios } from '../Hooks/useAxios';\r\nimport ErrorMessage from '../Components/UI/ErrorMessage';\r\n\r\nconst registerSchema = yup.object().shape({\r\n    name: yup.string().required(),\r\n    email: yup.string().email().required(),\r\n    password: yup.string().min(6).required(),\r\n    verify: yup\r\n        .string()\r\n        .oneOf(\r\n            [yup.ref('password'), null],\r\n            'Confirmation has to match your password',\r\n        )\r\n        .required(),\r\n});\r\n\r\nconst Register = (props) => {\r\n    const auth = useContext(AuthContext);\r\n    const history = useHistory();\r\n    const { isLoading, sendRequest } = useAxios();\r\n    const { register, handleSubmit, watch, errors } = useForm({\r\n        resolver: yupResolver(registerSchema),\r\n        mode: 'onChange',\r\n    });\r\n\r\n    //Submits a POST request for /api/user/register, returns a token and a user ID for auth context.\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            const response = await sendRequest(\r\n                'http://localhost:3000/api/user/',\r\n                'POST',\r\n                JSON.stringify(data),\r\n                { 'Content-Type': 'application/json' },\r\n            );\r\n            auth.login(response.data.user, response.data.token);\r\n            history.push(`/${response.data.user.userId}/dashboard`);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading && <Loading />}\r\n            {!isLoading && (\r\n                <div className='form-container'>\r\n                    <form\r\n                        className='form form--login'\r\n                        onSubmit={handleSubmit(onSubmit)}>\r\n                        <h2 className='form__title'>Create Account</h2>\r\n                        <label className='form__label' htmlFor='name'>\r\n                            Name\r\n                        </label>\r\n                        <input\r\n                            className='form__input'\r\n                            name='name'\r\n                            placeholder=\"Name\"\r\n                            ref={register}\r\n                        />\r\n                        {errors.name && (\r\n                            <ErrorMessage message={errors.name.message} />\r\n                        )}\r\n                        <label className='form__label' htmlFor='email'>\r\n                            E-mail\r\n                        </label>\r\n                        <input\r\n                            className='form__input'\r\n                            name='email'\r\n                            placeholder=\"E-mail\"\r\n                            ref={register}\r\n                        />\r\n                        {errors.email && (\r\n                            <ErrorMessage message={errors.email.message} />\r\n                        )}\r\n                        <label className='form__label' htmlFor='password'>\r\n                            Password\r\n                        </label>\r\n                        <input\r\n                            className='form__input'\r\n                            type='password'\r\n                            name='password'\r\n                            placeholder=\"Password\"\r\n                            ref={register}\r\n                        />\r\n                        {errors.password && (\r\n                            <ErrorMessage message={errors.password.message} />\r\n                        )}\r\n                        <label className='form__label' htmlFor='verify'>\r\n                            Confirm Password\r\n                        </label>\r\n                        <input\r\n                            className='form__input'\r\n                            type='password'\r\n                            name='verify'\r\n                            placeholder=\"Repeat your password\"\r\n                            ref={register}\r\n                        />\r\n                        {errors.verify && (\r\n                            <ErrorMessage message={errors.verify.message} />\r\n                        )}\r\n                        <button\r\n                            className='btn form__btn btn--primary'\r\n                            type='submit'>\r\n                            Register\r\n                        </button>\r\n                        <p className='form__message'>\r\n                            Already have an account?{' '}\r\n                        </p>\r\n                        <Link className='form__link' to={'/user/login'}>\r\n                            Log in here.\r\n                        </Link>\r\n                        {\r\n                            // <Link className=\"form__link\" to={'/user/login'}>Forgot your password?</Link>\r\n                        }{' '}\r\n                    </form>\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\AccountDetails.js",["150","151"],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Accounts.js",["152"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Modal from 'react-modal';\r\n\r\nimport Loading from '../Components/Loading';\r\nimport { useAxios } from '../Hooks/useAxios';\r\nimport { AuthContext } from '../Context/MainContext';\r\nimport NewAccount from '../Components/Modals/NewAccount';\r\n\r\nconst Accounts = (props) => {\r\n    const { user, token } = useContext(AuthContext);\r\n    const { isLoading, sendRequest } = useAxios();\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n    const [accounts, setAccounts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAccounts = async () => {\r\n            try {\r\n                const response = await sendRequest(\r\n                    'http://localhost:3000/api/user/accounts',\r\n                    'GET',\r\n                    {},\r\n                    { Authorization: `Bearer ${token}` },\r\n                );\r\n                console.log(response.data.accounts)\r\n                setAccounts(response.data.accounts);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        fetchAccounts();\r\n    }, []);\r\n\r\n    const openModal = () => {\r\n        setModalIsOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setModalIsOpen(false);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading && <Loading />}\r\n            {!isLoading && (\r\n                <div>\r\n                    <h1>Accounts of {user.name}</h1>\r\n\r\n                    <Modal isOpen={modalIsOpen} onRequestClose={closeModal}>\r\n                        <NewAccount closeModal={closeModal} />\r\n                    </Modal>\r\n                    <ul>\r\n                        {accounts.map((account) => (\r\n                            <Link\r\n                                key={account._id}\r\n                                to={`/${user.userId}/accounts/${account._id}`}>\r\n                                {account.accountName}\r\n                            </Link>\r\n                        ))}\r\n                    </ul>\r\n                    <button onClick={openModal} closeModal={closeModal}>Create Account</button>\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Accounts;\r\n","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Profile.js",["153","154","155","156","157"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport {useHistory} from 'react-router-dom';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport Modal from 'react-modal';\r\n\r\nimport DeleteModal from '../Components/Modals/DeleteModal';\r\nimport ErrorMessage from '../Components/UI/ErrorMessage';\r\nimport Loading from '../Components/Loading';\r\nimport { AuthContext } from '../Context/MainContext';\r\nimport { useAxios } from '../Hooks/useAxios';\r\n\r\nconst profileSchema = yup.object().shape({\r\n    name: yup.string().required(),\r\n    // email: yup.string().email().required(),\r\n    // verify: yup\r\n    //     .string()\r\n    //     .oneOf(\r\n    //         [yup.ref('password'), null],\r\n    //         'Confirmation has to match your password',\r\n    //     )\r\n    //     .required(),\r\n});\r\n\r\nconst Profile = (props) => {\r\n    const { user, token, logout } = useContext(AuthContext);\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n    const { isLoading, sendRequest } = useAxios();\r\n    const [userProfile, setUserProfile] = useState({});\r\n    const { name, email } = userProfile;\r\n    const history = useHistory();\r\n\r\n    const { register, handleSubmit, watch, errors, reset } = useForm({\r\n        resolver: yupResolver(profileSchema),\r\n        mode: 'onTouched',\r\n        defaultValues: {\r\n            name: name,\r\n            email: email,\r\n        },\r\n    });\r\n    \r\n    // Modal Data to pass down.\r\n    const modalData = {\r\n        header: 'Warning',\r\n        message:\r\n            'You are about to delete your user. This action cannot be reversed, and removes all your accounts, trades, Are you sure you want to go ahead? ',\r\n        label: 'If you are sure to proceed, please tick this box to confirm',\r\n        button: 'Delete'\r\n        };\r\n\r\n\r\n    // Fetching User Profile and loads into userProfile variable in state.\r\n    useEffect(() => {\r\n        const fetchUserProfile = async () => {\r\n            try {\r\n                const response = await sendRequest(\r\n                    'http://localhost:3000/api/user/profile',\r\n                    'GET',\r\n                    {},\r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                );\r\n                setUserProfile(response.data[0]);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        fetchUserProfile();\r\n    }, []);\r\n\r\n    //Populates the form with data from user profile\r\n    useEffect(() => {\r\n        if (userProfile) {\r\n            reset({\r\n                name,\r\n                email,\r\n            });\r\n        }\r\n    }, [userProfile]);\r\n\r\n    // Sends a delete request to the API. This function is passed to the modal, executable from there. \r\n    const deleteUser = async () => {\r\n        try {\r\n            const response = await sendRequest(\r\n                `http://localhost:3000/api/user/profile/${user.userId}`,\r\n                'DELETE',\r\n                {},\r\n\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            );\r\n            logout();\r\n            history.replace(`/`);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    // Modal Open/Close Controls\r\n    const openModal = () => {\r\n        setModalIsOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setModalIsOpen(false);\r\n    };\r\n\r\n\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            const response = await sendRequest(\r\n                `http://localhost:3000/api/user/profile/`,\r\n                'PATCH',\r\n                JSON.stringify(data),\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            );\r\n            history.push(`/${user.userId}/dashboard`)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading && <Loading />}\r\n            {!isLoading && (\r\n                <React.Fragment>\r\n                    <Modal isOpen={modalIsOpen} onRequestClose={closeModal}>\r\n                        <DeleteModal\r\n                            closeModal={closeModal}\r\n                            modalData={modalData}\r\n                            onDelete={deleteUser}\r\n                        />\r\n                    </Modal>\r\n                    <h1>Edit Profile</h1>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <label htmlFor='name'>Name</label>\r\n                        <input name='name' ref={register} />\r\n                        {errors.name && (\r\n                            <ErrorMessage message={errors.name.message} />\r\n                        )}\r\n                        {// <label htmlFor='email'>E-mail</label>\r\n                        // <input name='email' ref={register} />\r\n                        // {errors.email && (\r\n                        //     <ErrorMessage message={errors.email.message} />\r\n                        // )}\r\n                        }<button>Save Changes</button>\r\n                    </form>\r\n                    <button onClick={openModal}>Delete</button>\r\n                </React.Fragment>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\NotFound.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\Strategies.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Nav.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Hooks\\usePagination.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Loading.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Hooks\\useAxios.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Pages\\NewTrade.js",["158","159"],"import React, { useContext } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Loading from '../Components/Loading';\r\nimport { AuthContext } from '../Context/MainContext';\r\nimport { useAxios } from '../Hooks/useAxios';\r\nimport ErrorMessage from '../Components/UI/ErrorMessage';\r\n\r\nconst basicTradeSchema = yup.object().shape({\r\n    symbol: yup.string().required(),\r\n    outcome: yup.string().required(),\r\n    bias: yup.string().required(),\r\n    amount: yup.number().required(),\r\n    account: yup.string().required(),\r\n    notes: yup.string(),\r\n    date: yup.date().required()\r\n});\r\n\r\nconst NewTrade = (props) => {\r\n    //TODO: Basic form, or extended?\r\n    const { user, token } = useContext(AuthContext);\r\n    const { accounts } = user;\r\n    const { isLoading, sendRequest } = useAxios();\r\n    const { register, handleSubmit, formState, errors, control } = useForm({\r\n        resolver: yupResolver(basicTradeSchema),\r\n        mode: 'onChange', defaultValues: {\r\n            notes: ''\r\n        }\r\n    });\r\n    const { isValid } = formState;\r\n\r\n    const onSubmit = async (data) => {\r\n        const formData = {\r\n            ...data,\r\n            trader: user.userId,\r\n        };\r\n        try {\r\n            const response = await sendRequest(\r\n                'http://localhost:3000/api/trades/',\r\n                'POST',\r\n                JSON.stringify(formData),\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            );\r\n            console.log(response);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading && <Loading />}\r\n            {!isLoading && (\r\n                <div>\r\n                    <button onClick={props.closeModal}>X</button>\r\n\r\n                    <h1>New Trade</h1>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <label htmlFor='symbol'>Symbol</label>\r\n                        <input\r\n                            name='symbol'\r\n                            ref={register}\r\n                            placeholder='Trade symbol or ticker'\r\n                        />\r\n                        {errors.symbol && (\r\n                            <ErrorMessage message={errors.symbol.message} />\r\n                        )}\r\n                        <label htmlFor='account'>Account</label>\r\n                        <select name='account' ref={register}>\r\n                            {accounts &&\r\n                                accounts.map((account) => (\r\n                                    <option\r\n                                        key={account._id}\r\n                                        value={account._id}>\r\n                                        {account.accountName}\r\n                                    </option>\r\n                                ))}\r\n                        </select>\r\n                        <label htmlFor='outcome'>Outcome</label>\r\n                        <select name='outcome' ref={register}>\r\n                            <option value='breakeven'>Breakeven</option>\r\n                            <option value='profit'>Profit</option>\r\n                            <option value='loss'>Loss</option>\r\n                        </select>\r\n                        <label htmlFor='bias'>Bias</label>\r\n                        <select name='bias' ref={register}>\r\n                            <option value='bullish'>Bullish</option>\r\n                            <option value='bearish'>Bearish</option>\r\n                        </select>\r\n\r\n                        <label htmlFor='amount'>Amount</label>\r\n                        <input\r\n                            type='number'\r\n                            step='0.01'\r\n                            name='amount'\r\n                            ref={register}\r\n                            placeholder='Profit or loss value'\r\n                        />\r\n                        {errors.amount && (\r\n                            <ErrorMessage message={errors.amount.message} />\r\n                        )}\r\n                        <label htmlFor='notes'>Notes</label>\r\n                        <textArea\r\n                            name='notes'\r\n                            ref={register}\r\n                            placeholder='Optional notes'\r\n                        />\r\n                        {errors.notes && (\r\n                            <ErrorMessage message={errors.notes.message} />\r\n                        )}\r\n                        <label htmlFor='date'>Notes</label>\r\n                        <input type='date' name='date' ref={register}></input>\r\n                        {errors.date && (\r\n                            <ErrorMessage message={errors.date.message} />\r\n                        )}\r\n                        <button disabled={!isValid} type='submit'>\r\n                            New Trade\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default NewTrade;\r\n","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Footer.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\UI\\ErrorMessage.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\UI\\Pagination.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Modals\\EditAccount.js",["160"],"import React, { useContext,} from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Loading from '../Loading';\r\nimport { AuthContext } from '../../Context/MainContext';\r\nimport { useAxios } from '../../Hooks/useAxios';\r\nimport ErrorMessage from '../UI/ErrorMessage';\r\n\r\nconst accountSchema = yup.object().shape({\r\n    accountName: yup.string().required(),\r\n    description: yup.string().required(),\r\n});\r\n\r\nconst NewTrade = (props) => {\r\n    const { user, token } = useContext(AuthContext);\r\n    const { isLoading, sendRequest } = useAxios();\r\n    const {accountName, description} = props.data\r\n    const { register, handleSubmit, formState, errors } = useForm({\r\n        resolver: yupResolver(accountSchema),\r\n        mode: 'onChange', defaultValues: {\r\n            accountName, description\r\n        }\r\n    });\r\n    const { isValid } = formState;\r\n    const history = useHistory();\r\n    const {userId, accountId} = useParams();\r\n\r\n\r\n    const onSubmit = async (data) => {\r\n        const formData = {\r\n            ...data,\r\n            trader: user.userId,\r\n        };\r\n        try {\r\n            const response = await sendRequest(\r\n                `http://localhost:3000/api/user/accounts/${accountId}`,\r\n                'PATCH',\r\n                JSON.stringify(formData),\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            );\r\n            history.push(`/${userId}/accounts/${accountId}`)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading && <Loading />}\r\n            {!isLoading && (\r\n                <div>\r\n                    <button onClick={props.closeModal}>X</button>\r\n\r\n                    <h1>Edit Account Details</h1>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <label htmlFor='accountName'>Account Name</label>\r\n                        <input name='accountName' ref={register} />\r\n                        {errors.symbol && (\r\n                            <ErrorMessage\r\n                                message={errors.accountName.message}\r\n                            />\r\n                        )}\r\n                        <label htmlFor='description'>Description</label>\r\n                        <textarea name='description' ref={register} />\r\n                        {errors.symbol && (\r\n                            <ErrorMessage\r\n                                message={errors.description.message}\r\n                            />\r\n                        )}\r\n\r\n                        <button disabled={!isValid} type='submit'>\r\n                            Create Account\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default NewTrade;\r\n","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Modals\\DeleteModal.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\Modals\\NewAccount.js",["161"],"import React, { useContext } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Loading from '../Loading';\r\nimport { AuthContext } from '../../Context/MainContext';\r\nimport { useAxios } from '../../Hooks/useAxios';\r\nimport ErrorMessage from '../UI/ErrorMessage';\r\n\r\nconst accountSchema = yup.object().shape({\r\n    accountName: yup.string().required(),\r\n    balance: yup.number().required(),\r\n    description: yup.string().required(),\r\n});\r\n\r\nconst NewTrade = (props) => {\r\n    //TODO: Basic form, or extended?\r\n    const { user, token, addAccount } = useContext(AuthContext);\r\n    const { isLoading, sendRequest } = useAxios();\r\n    const { register, handleSubmit, formState, errors } = useForm({\r\n        resolver: yupResolver(accountSchema),\r\n        mode: 'onChange',\r\n    });\r\n    const { isValid } = formState;\r\n    //TODO: Get the id from the actual user\r\n\r\n    const onSubmit = async (data) => {\r\n        const formData = {\r\n            ...data,\r\n            userId: user.userId,\r\n        };\r\n        try {\r\n            const response = await sendRequest(\r\n                'http://localhost:3000/api/user/accounts',\r\n                'POST',\r\n                JSON.stringify(formData),\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            );\r\n            console.log(response.data);\r\n            addAccount(response.data);\r\n\r\n            props.closeModal();\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading && <Loading />}\r\n            {!isLoading && (\r\n                <div>\r\n                    <button onClick={props.closeModal}>X</button>\r\n\r\n                    <h1>Create new account</h1>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <label htmlFor='accountName'>Account Name</label>\r\n                        <input name='accountName' ref={register} />\r\n                        {errors.symbol && (\r\n                            <ErrorMessage\r\n                                message={errors.accountName.message}\r\n                            />\r\n                        )}\r\n                        <label htmlFor='balance'>Account Balance</label>\r\n                        <input\r\n                            name='balance'\r\n                            type='number'\r\n                            step='0.01'\r\n                            ref={register}\r\n                        />\r\n                        {errors.symbol && (\r\n                            <ErrorMessage message={errors.balance.message} />\r\n                        )}\r\n                        <label htmlFor='description'>Description</label>\r\n                        <textarea name='description' ref={register} />\r\n                        {errors.symbol && (\r\n                            <ErrorMessage\r\n                                message={errors.description.message}\r\n                            />\r\n                        )}\r\n\r\n                        <button disabled={!isValid} type='submit'>\r\n                            Create Account\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default NewTrade;\r\n","C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\UI\\PaginatedData.js",[],"C:\\Projects\\active\\own\\tradelog-app\\tradelog-front\\src\\Components\\TradeItem.js",["162","163","164","165","166","167","168","169","170"],"import React from 'react';\r\n\r\nconst TradeItem = (props) => {\r\n    const { _id, symbol, outcome, amount, date, description, strategy, accountId, userId, createdAt} = props.data\r\n\r\n    return ( \r\n        <div>\r\n            {symbol}\r\n        </div> );\r\n}\r\n \r\nexport default TradeItem;",{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":12,"column":22,"nodeType":"177","endLine":12,"endColumn":33},{"ruleId":"175","severity":1,"message":"178","line":25,"column":8,"nodeType":"179","endLine":25,"endColumn":10,"suggestions":"180"},{"ruleId":"175","severity":1,"message":"181","line":59,"column":8,"nodeType":"179","endLine":59,"endColumn":14,"suggestions":"182"},{"ruleId":"175","severity":1,"message":"183","line":35,"column":8,"nodeType":"179","endLine":35,"endColumn":17,"suggestions":"184"},{"ruleId":"175","severity":1,"message":"185","line":49,"column":8,"nodeType":"179","endLine":49,"endColumn":10,"suggestions":"186"},{"ruleId":"187","severity":1,"message":"188","line":54,"column":19,"nodeType":"177","messageId":"189","endLine":54,"endColumn":27},{"ruleId":"187","severity":1,"message":"190","line":20,"column":37,"nodeType":"177","messageId":"189","endLine":20,"endColumn":42},{"ruleId":"187","severity":1,"message":"191","line":20,"column":44,"nodeType":"177","messageId":"189","endLine":20,"endColumn":50},{"ruleId":"187","severity":1,"message":"190","line":29,"column":37,"nodeType":"177","messageId":"189","endLine":29,"endColumn":42},{"ruleId":"187","severity":1,"message":"192","line":17,"column":13,"nodeType":"177","messageId":"189","endLine":17,"endColumn":19},{"ruleId":"175","severity":1,"message":"193","line":48,"column":8,"nodeType":"179","endLine":48,"endColumn":10,"suggestions":"194"},{"ruleId":"175","severity":1,"message":"195","line":32,"column":8,"nodeType":"179","endLine":32,"endColumn":10,"suggestions":"196"},{"ruleId":"187","severity":1,"message":"190","line":34,"column":37,"nodeType":"177","messageId":"189","endLine":34,"endColumn":42},{"ruleId":"175","severity":1,"message":"195","line":72,"column":8,"nodeType":"179","endLine":72,"endColumn":10,"suggestions":"197"},{"ruleId":"175","severity":1,"message":"198","line":82,"column":8,"nodeType":"179","endLine":82,"endColumn":21,"suggestions":"199"},{"ruleId":"187","severity":1,"message":"188","line":87,"column":19,"nodeType":"177","messageId":"189","endLine":87,"endColumn":27},{"ruleId":"187","severity":1,"message":"188","line":117,"column":19,"nodeType":"177","messageId":"189","endLine":117,"endColumn":27},{"ruleId":"187","severity":1,"message":"200","line":2,"column":19,"nodeType":"177","messageId":"189","endLine":2,"endColumn":29},{"ruleId":"187","severity":1,"message":"201","line":26,"column":56,"nodeType":"177","messageId":"189","endLine":26,"endColumn":63},{"ruleId":"187","severity":1,"message":"188","line":38,"column":19,"nodeType":"177","messageId":"189","endLine":38,"endColumn":27},{"ruleId":"187","severity":1,"message":"202","line":3,"column":10,"nodeType":"177","messageId":"189","endLine":3,"endColumn":20},{"ruleId":"187","severity":1,"message":"203","line":4,"column":13,"nodeType":"177","messageId":"189","endLine":4,"endColumn":16},{"ruleId":"187","severity":1,"message":"204","line":4,"column":26,"nodeType":"177","messageId":"189","endLine":4,"endColumn":33},{"ruleId":"187","severity":1,"message":"205","line":4,"column":35,"nodeType":"177","messageId":"189","endLine":4,"endColumn":41},{"ruleId":"187","severity":1,"message":"206","line":4,"column":43,"nodeType":"177","messageId":"189","endLine":4,"endColumn":47},{"ruleId":"187","severity":1,"message":"207","line":4,"column":49,"nodeType":"177","messageId":"189","endLine":4,"endColumn":60},{"ruleId":"187","severity":1,"message":"208","line":4,"column":62,"nodeType":"177","messageId":"189","endLine":4,"endColumn":70},{"ruleId":"187","severity":1,"message":"209","line":4,"column":72,"nodeType":"177","messageId":"189","endLine":4,"endColumn":81},{"ruleId":"187","severity":1,"message":"192","line":4,"column":83,"nodeType":"177","messageId":"189","endLine":4,"endColumn":89},{"ruleId":"187","severity":1,"message":"210","line":4,"column":91,"nodeType":"177","messageId":"189","endLine":4,"endColumn":100},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Identifier","React Hook useCallback has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["213"],"React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["214"],"React Hook useEffect has missing dependencies: 'history', 'paginate', 'sendRequest', 'token', and 'user.userId'. Either include them or remove the dependency array.",["215"],"React Hook useEffect has missing dependencies: 'sendRequest', 'token', and 'tradeId'. Either include them or remove the dependency array.",["216"],"no-unused-vars","'response' is assigned a value but never used.","unusedVar","'watch' is assigned a value but never used.","'errors' is assigned a value but never used.","'userId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'accountId', 'sendRequest', and 'token'. Either include them or remove the dependency array.",["217"],"React Hook useEffect has missing dependencies: 'sendRequest' and 'token'. Either include them or remove the dependency array.",["218"],["219"],"React Hook useEffect has missing dependencies: 'email', 'name', and 'reset'. Either include them or remove the dependency array.",["220"],"'Controller' is defined but never used.","'control' is assigned a value but never used.","'useHistory' is defined but never used.","'_id' is assigned a value but never used.","'outcome' is assigned a value but never used.","'amount' is assigned a value but never used.","'date' is assigned a value but never used.","'description' is assigned a value but never used.","'strategy' is assigned a value but never used.","'accountId' is assigned a value but never used.","'createdAt' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"231","fix":"233"},{"desc":"234","fix":"235"},"Update the dependencies array to be: [history]",{"range":"236","text":"237"},"Update the dependencies array to be: [token, user]",{"range":"238","text":"239"},"Update the dependencies array to be: [account, history, paginate, sendRequest, token, user.userId]",{"range":"240","text":"241"},"Update the dependencies array to be: [sendRequest, token, tradeId]",{"range":"242","text":"243"},"Update the dependencies array to be: [accountId, sendRequest, token]",{"range":"244","text":"245"},"Update the dependencies array to be: [sendRequest, token]",{"range":"246","text":"247"},{"range":"248","text":"247"},"Update the dependencies array to be: [email, name, reset, userProfile]",{"range":"249","text":"250"},[973,975],"[history]",[2129,2135],"[token, user]",[1289,1298],"[account, history, paginate, sendRequest, token, user.userId]",[1801,1803],"[sendRequest, token, tradeId]",[1985,1987],"[accountId, sendRequest, token]",[1173,1175],"[sendRequest, token]",[2565,2567],[2781,2794],"[email, name, reset, userProfile]"]